const AppError = require('../utils/appError');

const errorHandler = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';

  // En dÃ©veloppement, on envoie plus de dÃ©tails
  if (process.env.NODE_ENV === 'development') {
    res.status(err.statusCode).json({
      status: err.status,
      error: err,
      message: err.message,
      stack: err.stack
    });
    return;
  }

  // En production, on envoie moins de dÃ©tails pour la sÃ©curitÃ©
  if (err.isOperational) {
    // Erreurs opÃ©rationnelles, erreurs que nous avons crÃ©Ã©es nous-mÃªmes
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message
    });
  } else {
    // Erreurs de programmation ou autres erreurs inconnues
    console.error('ERROR ğŸ’¥', err);
    res.status(500).json({
      status: 'error',
      message: 'Une erreur est survenue sur le serveur'
    });
  }
};

module.exports = errorHandler; 